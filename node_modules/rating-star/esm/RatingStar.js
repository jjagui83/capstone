import React, { createContext } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';

function RangeArray(len) {
    return Array.apply(null, new Array(len)).map(function (n, index) { return index; });
}
function toColourTheme(val) {
    var _a, _b, _c;
    return {
        stroke: (_a = val.stroke) !== null && _a !== void 0 ? _a : "#FF9A01",
        mask: (_b = val.mask) !== null && _b !== void 0 ? _b : "#FFCA28",
        rear: (_c = val.rear) !== null && _c !== void 0 ? _c : "#EBEBEB",
    };
}
function toOffsets(rating, scorePerStar) {
    var starArray = [];
    var numOfFullStar = Math.floor(rating / scorePerStar);
    var remainder = (rating - numOfFullStar * scorePerStar) / scorePerStar;
    for (var i = 0; i < numOfFullStar; i++) {
        starArray.push(1);
    }
    starArray.push(remainder);
    return starArray;
}

var Context = createContext({
    id: "",
    colours: { mask: "", rear: "", stroke: "" },
    offsets: [],
    size: 24,
    noBorder: false,
});

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

var Container = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: inline-block;\n  padding: 8px;\n"], ["\n  display: inline-block;\n  padding: 8px;\n"])));
var IconsWrapper = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: ", ";\n"], ["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: ", ";\n"])), function (props) { return (props.clickable ? "pointer" : "default"); });
var StarIconWrapper = styled.div(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  svg {\n    path,\n    polygon,\n    rect,\n    circle,\n    image {\n      fill: ", ";\n    }\n  }\n"], ["\n  svg {\n    path,\n    polygon,\n    rect,\n    circle,\n    image {\n      fill: ", ";\n    }\n  }\n"])), function (_a) {
    var elemId = _a.elemId, index = _a.index;
    return "url(#star_mask_" + elemId + "-" + index + ")";
});
var templateObject_1, templateObject_2, templateObject_3;

/**
 * Using https://material.io/resources/icons/?icon=star_rate
 */
var IcStar = function (_a) {
    var _b;
    var index = _a.index, onClick = _a.onClick, StarIcon = _a.StarIcon, onMouseOver = _a.onMouseOver;
    var _c = React.useContext(Context), id = _c.id, colours = _c.colours, offsets = _c.offsets, size = _c.size, noBorder = _c.noBorder;
    return (React.createElement(StarIconWrapper, { elemId: id, index: index },
        React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: size, height: size },
            React.createElement("defs", null,
                React.createElement("linearGradient", { id: "star_mask_" + id + "-" + index },
                    React.createElement("stop", { offset: "0", stopColor: colours.mask }),
                    React.createElement("stop", { stopColor: colours.mask, offset: (_b = offsets[index]) !== null && _b !== void 0 ? _b : 0 }),
                    React.createElement("stop", { stopColor: colours.rear, offset: "0" }),
                    React.createElement("stop", { offset: "1", stopColor: colours.rear }))),
            React.createElement("g", { stroke: colours.stroke, strokeWidth: noBorder ? 0 : 0.5 }, !StarIcon ? (React.createElement("polygon", { points: "14.43,10 12,2 9.57,10 2,10 8.18,14.41 5.83,22 12,17.31 18.18,22 15.83,14.41 22,10", onClick: onClick, onMouseOver: onMouseOver })) : (React.createElement(StarIcon, { onClick: onClick, onMouseOver: onMouseOver }))))));
};

var RatingStar = function (_a) {
    var id = _a.id, _b = _a.maxScore, maxScore = _b === void 0 ? 5 : _b, _c = _a.rating, rating = _c === void 0 ? 0 : _c, _d = _a.colors, colors = _d === void 0 ? {} : _d, _e = _a.numberOfStar, numberOfStar = _e === void 0 ? 5 : _e, _f = _a.size, size = _f === void 0 ? 24 : _f, _g = _a.clickable, clickable = _g === void 0 ? false : _g, _h = _a.noBorder, noBorder = _h === void 0 ? false : _h, starIcon = _a.starIcon, onRatingChange = _a.onRatingChange;
    var scorePerStar = React.useMemo(function () { return maxScore / numberOfStar; }, [maxScore, numberOfStar]);
    var range = React.useMemo(function () { return RangeArray(numberOfStar); }, [numberOfStar]);
    var colours = React.useMemo(function () { return toColourTheme(colors); }, [colors]);
    var _j = React.useState(function () { return toOffsets(rating, scorePerStar); }), offsets = _j[0], setOffsets = _j[1];
    var onClickStar = React.useCallback(function (index) { return function () {
        var score = (index + 1) * scorePerStar;
        if (onRatingChange) {
            onRatingChange(score);
        }
        setOffsets(toOffsets(score, scorePerStar));
    }; }, [rating, scorePerStar, onRatingChange]);
    var onMouseOverStar = React.useCallback(function (index) { return function () {
        setOffsets(toOffsets((index + 1) * scorePerStar, scorePerStar));
    }; }, [rating, scorePerStar]);
    var onMouseLeaveSvg = React.useCallback(function () {
        setOffsets(toOffsets(rating, scorePerStar));
    }, [rating, scorePerStar]);
    React.useEffect(function () {
        setOffsets(toOffsets(rating, scorePerStar));
    }, [rating, scorePerStar]);
    return (React.createElement(Context.Provider, { value: { id: id, colours: colours, offsets: offsets, size: size, noBorder: noBorder } },
        React.createElement(Container, { id: id, className: "rating-star" },
            React.createElement(IconsWrapper, { className: "rating-star-icons-wrapper", clickable: clickable, onMouseLeave: clickable ? onMouseLeaveSvg : undefined }, range.map(function (index) { return (React.createElement(IcStar, { key: "star_mask_" + id + "-" + index, index: index, StarIcon: starIcon, onClick: clickable ? onClickStar(index) : undefined, onMouseOver: clickable ? onMouseOverStar(index) : undefined })); })))));
};
RatingStar.propTypes = {
    id: PropTypes.string.isRequired,
    size: PropTypes.number,
    clickable: PropTypes.bool,
    rating: PropTypes.number,
    colors: PropTypes.object,
    numberOfStar: PropTypes.number,
    onRatingChange: PropTypes.func,
};
var RatingStarIconsWrapper = IconsWrapper;
var RatingStarContainer = Container;

export { RatingStar, RatingStarContainer, RatingStarIconsWrapper };
